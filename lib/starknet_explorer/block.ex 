defmodule StarknetExplorer.Block do
  use Ecto.Schema
  import Ecto.Changeset
  @primary_key {:number, :integer, []}
  schema "blocks" do
      field :number, :integer, primary_key: true
      field :status, :string
      field :hash, :string
      field :parent_hash, :string
      field :new_root, :string 
      field :timestamp, :integer 
      field :sequencer_address, :string
      field :original_json, :binary 
      has_many :transactions, StarknetExplorer.Transaction, through: [:hash]
      timestamps()
  end
  def changeset(block, attrs) do
    block
    |> cast(attrs, [:number, :status, :hash, :parent_hash, :new_root, :timestamp, :sequencer_address, :original_json])
    |> validate_required([:number, :status, :hash, :parent_hash, :new_root, :timestamp, :sequencer_address, :original_json])
    |> unique_constraint(:number)
    |> unique_constraint(:hash)
  end

  def highest_fetched_block_number() do
    query =
      from(b in StarknetExplorer.Block, order_by: [desc: b.number], limit: 1)
    case Repo.all(query) do
      [] -> 0
      [%StarknetExplorer.Block{number: number}] -> number
    end
  end
end
